"""
Deterministic mutation noise generation.
"""

import numpy as np

# pylint: disable=R0903
class NoiseSource:
    """
    A deterministic noise generator.
    """
    def __init__(self, seed=1337, size=(1 << 26), max_cache=(1<<29)):
        state = np.random.RandomState(seed=seed)
        self.noise = state.normal(size=size).astype('float32')
        self._cache = {}
        self._max_cache = max_cache

    def block(self, size, seed):
        """
        Generate a block of noise for the given seed.
        """
        state = np.random.RandomState(seed=seed)
        indices = state.randint(0, high=self.noise.shape[0], size=size)
        return self.noise[indices]

    def cumulative_block(self, size, seeds):
        """
        Generate a block of noise representing the sum of
        the blocks of noise generated by the seeds.

        This caches seed prefixes (i.e. the sum of all but
        the last seed).
        """
        final_block = self.block(size, seeds[-1])
        if len(seeds) == 1:
            return final_block
        cache_key = tuple(seeds[:-1])
        if cache_key in self._cache:
            return self._cache[cache_key] + final_block
        prefix = np.sum(self.block(size, seed) for seed in seeds[:-1])
        self._cache[cache_key] = prefix
        return prefix + final_block

    def _evict_cache(self):
        while self._cache_size() > self._max_cache:
            del self._cache[self._cache.keys()[0]]

    def _cache_size(self):
        return sum(x.shape[0] for x in self._cache.values())

def noise_seeds(num_seeds):
    """
    Generate random seeds for NoiseSource.block().
    """
    return [int(x) for x in np.random.randint(0, high=2**32, size=num_seeds)]
